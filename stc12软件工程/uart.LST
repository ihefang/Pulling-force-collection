C51 COMPILER V9.02   UART                                                                  09/24/2018 20:43:13 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN uart.OBJ
COMPILER INVOKED BY: F:\keil\C51\BIN\C51.EXE uart.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include<reg52.h>
   2          #include "uart.h"
   3          
   4          #define SEND_DATA_MOD   1
   5          /****************************************************************************** 
   6          计算波特率              
   7          ******************************************************************************/
   8          #define T1_TimerReload          (256 - MAIN_Fosc / 192 / Baudrate0)             //Calculate the timer1 reload value     at 12T mo
             -de
   9          
  10          void UART_Init(void)
  11          {
  12   1              SCON = 0x50; //串口工作方式为1 ， 串行允许接收
  13   1              TMOD |= 0x20; //定时器1 工作在方式2
  14   1              PCON |= 0x80; //SMOD = 1; 波特率加倍
  15   1              TH1 = T1_TimerReload; //波特率 9600bps fosc=24MHz
  16   1              ES = 1; //开串口中断    
  17   1      }
  18          /****************************************************************************** 
  19          串口发送一个字符串                      
  20          ******************************************************************************/
  21          /*
  22          void Uart_SendString(unsigned char dat)
  23          {        
  24            unsigned  char i=0; 
  25                     
  26            //while(trdata[i]!=0x00)
  27            //{
  28                            //SBUF=trdata[i];
  29                        //while(!TI);
  30                        //TI=0;
  31                        //i++;
  32            //}
  33          } */
  34          
  35          /****************************************************************************** 
  36          串口发送一个字节                        
  37          ******************************************************************************/
  38          void Uart_SendChar(unsigned char dat)
  39          {
  40   1              SBUF = dat; //待发送的数据写入缓冲区
  41   1              while(!TI); //等待发送完成
  42   1              TI = 0; //清零发送标志位
  43   1      }
  44             
  45          /****************************************************************************** 
  46          串口接收中断函数                        
  47          ******************************************************************************/
  48          extern char update;
  49          void INT_UartRcv(void) interrupt 4
  50          {
  51   1              unsigned char Rcv = 0;
  52   1              if(RI) //查询接收标志位（有数据发送过来时置为1）
  53   1              {
  54   2                      RI = 0;          //接收标志位清零
C51 COMPILER V9.02   UART                                                                  09/24/2018 20:43:13 PAGE 2   

  55   2                      Rcv = SBUF; //存储缓冲区的数据
  56   2                      //判断是否为下载流信息
  57   2                      //if(0x7F == Rcv)       update=1;
  58   2                      //IAP_CONTR = IAP_ENABLE;//允许IAP, 也就是直接进入下载程序
  59   2                      //Uart_SendChar(Rcv); //让从计算机上传到单片机的数据 ， 传回的计算机显示
  60   2              }
  61   1      }
  62          
  63          //void send_hx711(int *p)//(0x)48 58 2D 1A 0A 
  64          //{     
  65          //      //unsigned int a,b,c,d;                          // H  X  -  6666 
  66          //      int w;
  67          //      char i = 0;
  68          //
  69          //    for(i = 0;i < 1;i++)
  70          //      {       
  71          //          w = *p++;
  72          //              Uart_SendChar('H');  //发送帧头 hx711 数据
  73          //          Uart_SendChar('X');  //发送帧头 hx711 数据
  74          //          if(w < 0)
  75          //              {
  76          //                w = -w;
  77          //                Uart_SendChar((char)45);  //发送负号 (0x2D)
  78          //              }
  79          //              else
  80          //              {
  81          //                Uart_SendChar((char)43);  //发送正号 (0x2B)
  82          //              }
  83          //              Uart_SendChar((char)((w&0xff00)>>8));  //发送高8位
  84          //          Uart_SendChar((char)(w&0xff));
  85          //      }
  86          //
  87          
  88          //#if SEND_DATA_MOD
  89          //      Uart_SendChar((char)((w&0xff00)>>8));  //发送高8位
  90          //    Uart_SendChar((char)(w&0xff));               //发送低8位
  91          //#else 
  92          //    
  93          //    a=w%10000/1000;
  94          //    b=w%1000/100;
  95          //    c=w%100/10;
  96          //    d=w%10;
  97          //    Uart_SendChar((char)(a+48));
  98          //    Uart_SendChar((char)(b+48));
  99          //    Uart_SendChar((char)(c+48));    
 100          //    Uart_SendChar((char)(d+48)); 
 101          //#endif  
 102          //}
 103          
 104          
 105          void send_hx711(int num)//(0x)48 58 2D 1A 0A 
 106          {               
 107   1              Uart_SendChar('H');  //发送帧头 hx711 数据
 108   1              Uart_SendChar('X');  //发送帧头 hx711 数据
 109   1              if(num < 0)
 110   1              {
 111   2                 num = -num;
 112   2                 Uart_SendChar((char)45);  //发送负号 (0x2D)
 113   2              }
 114   1              else
 115   1              {
 116   2                 Uart_SendChar((char)43);  //发送正号 (0x2B)
C51 COMPILER V9.02   UART                                                                  09/24/2018 20:43:13 PAGE 3   

 117   2              }
 118   1              Uart_SendChar((char)((num&0xff00)>>8));  //发送高8位
 119   1              Uart_SendChar((char)(num&0xff)); 
 120   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     94    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
