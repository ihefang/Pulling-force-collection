C51 COMPILER V9.02   I2C                                                                   09/24/2018 20:43:12 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN i2c.OBJ
COMPILER INVOKED BY: F:\keil\C51\BIN\C51.EXE i2c.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "i2c.h"
   2          
   3          #define  _Nop()  _nop_()  //定义空指令
   4                                   
   5          bit ack;                      //应答标志位
   6          
   7          sbit SDA=P4^2;
   8          sbit SCL=P1^0;
   9          /****************************************************************************** 
  10          启动总线
  11          ******************************************************************************/
  12          void Start_I2c()
  13          {
  14   1        SDA=1;   //发送起始条件的数据信号
  15   1        _Nop();
  16   1        SCL=1;
  17   1        _Nop();    //起始条件建立时间大于4.7us,延时
  18   1        _Nop();
  19   1        _Nop();
  20   1        _Nop();
  21   1        _Nop();    
  22   1        SDA=0;     //发送起始信号
  23   1        _Nop();    //起始条件锁定时间大于4μ
  24   1        _Nop();
  25   1        _Nop();
  26   1        _Nop();
  27   1        _Nop();       
  28   1        SCL=0;    //钳住I2C总线，准备发送或接收数据
  29   1        _Nop();
  30   1        _Nop();
  31   1      }
  32          /****************************************************************************** 
  33          结束总线
  34          ******************************************************************************/
  35          void Stop_I2c()
  36          {
  37   1        SDA=0;    //发送结束条件的数据信号
  38   1        _Nop();   //发送结束条件的时钟信号
  39   1        SCL=1;    //结束条件建立时间大于4μ
  40   1        _Nop();
  41   1        _Nop();
  42   1        _Nop();
  43   1        _Nop();
  44   1        _Nop();
  45   1        SDA=1;    //发送I2C总线结束信号
  46   1        _Nop();
  47   1        _Nop();
  48   1        _Nop();
  49   1        _Nop();
  50   1      }
  51          /****************************************************************************** 
  52                           字节数据传送函数               
  53          函数原型: void  SendByte(unsigned char c);
  54          功能:  将数据c发送出去,可以是地址,也可以是数据,发完后等待应答,并对
  55               此状态位进行操作.(不应答或非应答都使ack=0 假)     
C51 COMPILER V9.02   I2C                                                                   09/24/2018 20:43:12 PAGE 2   

  56               发送数据正常，ack=1; ack=0表示被控器无应答或损坏。
  57          ******************************************************************************/
  58          void SendByte(unsigned char c)
  59          {
  60   1       unsigned char BitCnt;
  61   1       
  62   1       for(BitCnt=0;BitCnt<8;BitCnt++)  //要传送的数据长度为8位
  63   1          {
  64   2           if((c<<BitCnt)&0x80)SDA=1;   //判断发送位
  65   2             else  SDA=0;                
  66   2           _Nop();
  67   2           SCL=1;               //置时钟线为高，通知被控器开始接收数据位
  68   2            _Nop(); 
  69   2            _Nop();             //保证时钟高电平周期大于4μ
  70   2            _Nop();
  71   2            _Nop();
  72   2            _Nop();         
  73   2           SCL=0; 
  74   2          }
  75   1          
  76   1          _Nop();
  77   1          _Nop();
  78   1          SDA=1;               //8位发送完后释放数据线，准备接收应答位
  79   1          _Nop();
  80   1          _Nop();   
  81   1          SCL=1;
  82   1          _Nop();
  83   1          _Nop();
  84   1          _Nop();
  85   1          if(SDA==1)ack=0;     
  86   1             else ack=1;        //判断是否接收到应答信号
  87   1          SCL=0;
  88   1          _Nop();
  89   1          _Nop();
  90   1      }
  91          
  92          /****************************************************************************** 
  93                           字节数据传送函数               
  94          函数原型: unsigned char  RcvByte();
  95          功能:  用来接收从器件传来的数据,并判断总线错误(不发应答信号)，
  96               发完后请用应答函数。 
  97          ******************************************************************************/ 
  98          unsigned char  RcvByte()
  99          {
 100   1        unsigned char retc;
 101   1        unsigned char BitCnt;
 102   1        
 103   1        retc=0; 
 104   1        SDA=1;             //置数据线为输入方式
 105   1        for(BitCnt=0;BitCnt<8;BitCnt++)
 106   1            {
 107   2              _Nop();           
 108   2              SCL=0;       //置时钟线为低，准备接收数据位
 109   2              _Nop();
 110   2              _Nop();      //时钟低电平周期大于4.7us
 111   2              _Nop();
 112   2              _Nop();
 113   2              _Nop();
 114   2              SCL=1;       //置时钟线为高使数据线上数据有效
 115   2              _Nop();
 116   2              _Nop();
 117   2              retc=retc<<1;
C51 COMPILER V9.02   I2C                                                                   09/24/2018 20:43:12 PAGE 3   

 118   2              if(SDA==1)retc=retc+1; //读数据位,接收的数据位放入retc中
 119   2              _Nop();
 120   2              _Nop(); 
 121   2            }
 122   1        SCL=0;    
 123   1        _Nop();
 124   1        _Nop();
 125   1        return(retc);
 126   1      }
 127          
 128          
 129          /****************************************************************************** 
 130                               应答子函数
 131          原型:  void Ack_I2c(void); 
 132          ******************************************************************************/
 133          /*void Ack_I2c(void)
 134          {
 135            
 136            SDA=0;     
 137            _Nop();
 138            _Nop();
 139            _Nop();      
 140            SCL=1;
 141            _Nop();
 142            _Nop();              //时钟低电平周期大于4μ
 143            _Nop();
 144            _Nop();
 145            _Nop();  
 146            SCL=0;               //清时钟线，钳住I2C总线以便继续接收
 147            _Nop();
 148            _Nop();    
 149          }*/
 150          
 151          /****************************************************************************** 
 152                               非应答子函数
 153          原型:  void NoAck_I2c(void);
 154          ******************************************************************************/
 155          void NoAck_I2c(void)
 156          {
 157   1        
 158   1        SDA=1;
 159   1        _Nop();
 160   1        _Nop();
 161   1        _Nop();      
 162   1        SCL=1;
 163   1        _Nop();
 164   1        _Nop();              //时钟低电平周期大于4μ
 165   1        _Nop();
 166   1        _Nop();
 167   1        _Nop();  
 168   1        SCL=0;                //清时钟线，钳住I2C总线以便继续接收
 169   1        _Nop();
 170   1        _Nop();    
 171   1      }
 172          /****************************************************************************** 
 173                             向无子地址器件发送字节数据函数               
 174          函数原型: bit  ISendByte(unsigned char sla,ucahr c);  
 175          功能:     从启动总线到发送地址，数据，结束总线的全过程,从器件地址sla.
 176                     如果返回1表示操作成功，否则操作有误。
 177          注意：    使用前必须已结束总线。
 178          ******************************************************************************/
 179          /*bit ISendByte(unsigned char sla,unsigned char c)
C51 COMPILER V9.02   I2C                                                                   09/24/2018 20:43:12 PAGE 4   

 180          {
 181             Start_I2c();               //启动总线
 182             SendByte(sla);             //发送器件地址
 183               if(ack==0)return(0);
 184             SendByte(c);               //发送数据
 185               if(ack==0)return(0);
 186            Stop_I2c();                 //结束总线
 187            return(1);
 188          }
 189          */
 190          /****************************************************************************** 
 191                              向有子地址器件发送多字节数据函数               
 192          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);  
 193          功能:     从启动总线到发送地址，子地址,数据，结束总线的全过程,从器件
 194                    地址sla，子地址suba，发送内容是s指向的内容，发送no个字节。
 195                     如果返回1表示操作成功，否则操作有误。
 196          注意：    使用前必须已结束总线。;
 197          ******************************************************************************/
 198          /*bit ISendStr(unsigned char sla,unsigned char suba,unsigned char *s,unsigned char no)
 199          {
 200             unsigned char i;
 201           for(i=0;i<no;i++)
 202              { 
 203             Start_I2c();               //启动总线
 204             SendByte(sla);             //发送器件地址
 205               if(ack==0)return(0);
 206             SendByte(suba);            //发送器件子地址
 207               if(ack==0)return(0); 
 208           
 209               SendByte(*s);            //发送数据
 210                 if(ack==0)return(0);
 211               Stop_I2c();                  //结束总线
 212                   DelayMs(1);               //必须延时等待芯片内部自动处理数据完毕
 213                   s++;
 214                   suba++;
 215              } 
 216            return(1);
 217          }
 218          */
 219          
 220          /****************************************************************************** 
 221                              向无子地址器件读字节数据函数               
 222          函数原型: bit  IRcvByte(unsigned char sla,ucahr *c);  
 223          功能:     从启动总线到发送地址，读数据，结束总线的全过程,从器件地
 224                    址sla，返回值在c.
 225                     如果返回1表示操作成功，否则操作有误。
 226          注意：    使用前必须已结束总线
 227          ******************************************************************************/
 228          /*bit IRcvByte(unsigned char sla,unsigned char *c)
 229          {
 230             Start_I2c();                //启动总线
 231             SendByte(sla+1);            //发送器件地址
 232               if(ack==0)return(0);
 233             *c=RcvByte();               //读取数据
 234               NoAck_I2c();              //发送非就答位
 235               Stop_I2c();               //结束总线
 236            return(1);
 237          }
 238          
 239          */
 240          
 241          /****************************************************************************** 
C51 COMPILER V9.02   I2C                                                                   09/24/2018 20:43:12 PAGE 5   

 242                              向有子地址器件读取多字节数据函数               
 243          函数原型: bit  ISendStr(unsigned char sla,unsigned char suba,ucahr *s,unsigned char no);  
 244          功能:     从启动总线到发送地址，子地址,读数据，结束总线的全过程,从器件
 245                    地址sla，子地址suba，读出的内容放入s指向的存储区，读no个字节。
 246                     如果返回1表示操作成功，否则操作有误。
 247          注意：    使用前必须已结束总线。
 248          ******************************************************************************/
 249          /*bit IRcvStr(unsigned char sla,unsigned char suba,unsigned char *s,unsigned char no)
 250          {
 251             unsigned char i;
 252          
 253             Start_I2c();               //启动总线
 254             SendByte(sla);             //发送器件地址
 255               if(ack==0)return(0);
 256             SendByte(suba);            //发送器件子地址
 257               if(ack==0)return(0);
 258          
 259             Start_I2c();
 260             SendByte(sla+1);
 261                if(ack==0)return(0);
 262          
 263            for(i=0;i<no-1;i++)
 264              { 
 265               *s=RcvByte();              //发送数据
 266                Ack_I2c();                //发送就答位 
 267               s++;
 268              } 
 269             *s=RcvByte();
 270              NoAck_I2c();                 //发送非应位
 271              Stop_I2c();                    //结束总线
 272            return(1);
 273          }
 274          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    152    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
